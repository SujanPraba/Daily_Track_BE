import { DailyUpdateService } from '../services/daily-update.service';
import { CreateDailyUpdateDto } from '../dtos/create-daily-update.dto';
import { UpdateDailyUpdateDto } from '../dtos/update-daily-update.dto';
import { ApproveDailyUpdateDto } from '../dtos/approve-daily-update.dto';
import { SearchDailyUpdatesDto, TimeTrackingDto } from '../dtos/search-daily-updates.dto';
import { PaginatedDailyUpdatesDto } from '../dtos/paginated-daily-updates.dto';
import { DailyUpdateWithTeamDto } from '../dtos/daily-update-with-team.dto';
import { ZohoSyncDailyUpdateDto, ZohoSyncResponseDto } from '../dtos/zoho-sync-daily-update.dto';
export declare class DailyUpdateController {
    private readonly dailyUpdateService;
    constructor(dailyUpdateService: DailyUpdateService);
    create(createDailyUpdateDto: CreateDailyUpdateDto): Promise<{
        date: Date;
        id: string;
        status: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        projectId: string;
        userId: string;
        teamId: string | null;
        tickets: string | null;
        ticketsHours: string | null;
        internalMeetingHours: string | null;
        externalMeetingHours: string | null;
        otherActivities: string | null;
        otherActivityHours: string | null;
        leavePermissionHours: string | null;
        totalHours: string | null;
        notes: string | null;
        submittedAt: Date | null;
        approvedAt: Date | null;
        approvedBy: string | null;
    }>;
    createWithZohoSync(zohoSyncDto: ZohoSyncDailyUpdateDto): Promise<ZohoSyncResponseDto>;
    searchDailyUpdates(searchDto: SearchDailyUpdatesDto, req: any): Promise<PaginatedDailyUpdatesDto>;
    findAll(req: any): Promise<{
        date: Date;
        id: string;
        status: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        projectId: string;
        userId: string;
        teamId: string | null;
        tickets: string | null;
        ticketsHours: string | null;
        internalMeetingHours: string | null;
        externalMeetingHours: string | null;
        otherActivities: string | null;
        otherActivityHours: string | null;
        leavePermissionHours: string | null;
        totalHours: string | null;
        notes: string | null;
        submittedAt: Date | null;
        approvedAt: Date | null;
        approvedBy: string | null;
    }[]>;
    findOne(id: string): Promise<{
        date: Date;
        id: string;
        status: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        projectId: string;
        userId: string;
        teamId: string | null;
        tickets: string | null;
        ticketsHours: string | null;
        internalMeetingHours: string | null;
        externalMeetingHours: string | null;
        otherActivities: string | null;
        otherActivityHours: string | null;
        leavePermissionHours: string | null;
        totalHours: string | null;
        notes: string | null;
        submittedAt: Date | null;
        approvedAt: Date | null;
        approvedBy: string | null;
    }>;
    getTeamByProject(projectId: string): Promise<{
        id: string;
        name: string;
        description: string | null;
    } | null>;
    update(id: string, updateDailyUpdateDto: UpdateDailyUpdateDto): Promise<{
        date: Date;
        id: string;
        status: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        projectId: string;
        userId: string;
        teamId: string | null;
        tickets: string | null;
        ticketsHours: string | null;
        internalMeetingHours: string | null;
        externalMeetingHours: string | null;
        otherActivities: string | null;
        otherActivityHours: string | null;
        leavePermissionHours: string | null;
        totalHours: string | null;
        notes: string | null;
        submittedAt: Date | null;
        approvedAt: Date | null;
        approvedBy: string | null;
    }>;
    remove(id: string): Promise<void>;
    submit(id: string): Promise<{
        date: Date;
        id: string;
        status: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        projectId: string;
        userId: string;
        teamId: string | null;
        tickets: string | null;
        ticketsHours: string | null;
        internalMeetingHours: string | null;
        externalMeetingHours: string | null;
        otherActivities: string | null;
        otherActivityHours: string | null;
        leavePermissionHours: string | null;
        totalHours: string | null;
        notes: string | null;
        submittedAt: Date | null;
        approvedAt: Date | null;
        approvedBy: string | null;
    }>;
    getTimeTracking(timeTrackingDto: TimeTrackingDto, req: any): Promise<any[]>;
    testDbContent(req: any): Promise<{
        currentUserId: any;
        hasFullPermission: boolean;
        userProjectIds: string[];
        dailyUpdatesCount: number;
        sampleDailyUpdate: {
            date: Date;
            id: string;
            status: string | null;
            createdAt: Date | null;
            updatedAt: Date | null;
            projectId: string;
            userId: string;
            teamId: string | null;
            tickets: string | null;
            ticketsHours: string | null;
            internalMeetingHours: string | null;
            externalMeetingHours: string | null;
            otherActivities: string | null;
            otherActivityHours: string | null;
            leavePermissionHours: string | null;
            totalHours: string | null;
            notes: string | null;
            submittedAt: Date | null;
            approvedAt: Date | null;
            approvedBy: string | null;
        };
        teams: {
            id: string;
            name: string;
            description: string | null;
        } | null;
    }>;
    testSearchPermissions(req: any): Promise<{
        currentUserId: any;
        permissions: {
            VIEW_DAILY_UPDATES_FULL: boolean;
            VIEW_DAILY_UPDATES: boolean;
        };
        userProjectIds: string[];
        searchCriteria: {
            page: number;
            limit: number;
        };
        searchResult: {
            totalResults: number;
            totalPages: number;
            currentPage: number;
            resultsCount: number;
            sampleResult: DailyUpdateWithTeamDto;
        };
        debugInfo: {
            message: string;
            expectedBehavior: string;
        };
    }>;
    approve(id: string, approveDailyUpdateDto: ApproveDailyUpdateDto): Promise<{
        date: Date;
        id: string;
        status: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        projectId: string;
        userId: string;
        teamId: string | null;
        tickets: string | null;
        ticketsHours: string | null;
        internalMeetingHours: string | null;
        externalMeetingHours: string | null;
        otherActivities: string | null;
        otherActivityHours: string | null;
        leavePermissionHours: string | null;
        totalHours: string | null;
        notes: string | null;
        submittedAt: Date | null;
        approvedAt: Date | null;
        approvedBy: string | null;
    }>;
    testZohoConnection(): Promise<{
        success: boolean;
        message: string;
        details?: any;
    }>;
    getZohoActivityTypes(): Promise<string[]>;
}
