import { DailyUpdateService } from '../services/daily-update.service';
import { CreateDailyUpdateDto } from '../dtos/create-daily-update.dto';
import { UpdateDailyUpdateDto } from '../dtos/update-daily-update.dto';
import { ApproveDailyUpdateDto } from '../dtos/approve-daily-update.dto';
import { SearchDailyUpdatesDto } from '../dtos/search-daily-updates.dto';
import { PaginatedDailyUpdatesDto } from '../dtos/paginated-daily-updates.dto';
export declare class DailyUpdateController {
    private readonly dailyUpdateService;
    constructor(dailyUpdateService: DailyUpdateService);
    create(createDailyUpdateDto: CreateDailyUpdateDto): Promise<{
        date: Date;
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        userId: string;
        status: string | null;
        projectId: string;
        teamId: string | null;
        tickets: string | null;
        internalMeetingHours: string | null;
        externalMeetingHours: string | null;
        otherActivities: string | null;
        otherActivityHours: string | null;
        totalHours: string | null;
        notes: string | null;
        submittedAt: Date | null;
        approvedAt: Date | null;
        approvedBy: string | null;
    }>;
    searchDailyUpdates(searchDto: SearchDailyUpdatesDto, req: any): Promise<PaginatedDailyUpdatesDto>;
    findAll(req: any): Promise<{
        date: Date;
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        userId: string;
        status: string | null;
        projectId: string;
        teamId: string | null;
        tickets: string | null;
        internalMeetingHours: string | null;
        externalMeetingHours: string | null;
        otherActivities: string | null;
        otherActivityHours: string | null;
        totalHours: string | null;
        notes: string | null;
        submittedAt: Date | null;
        approvedAt: Date | null;
        approvedBy: string | null;
    }[]>;
    findOne(id: string): Promise<{
        date: Date;
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        userId: string;
        status: string | null;
        projectId: string;
        teamId: string | null;
        tickets: string | null;
        internalMeetingHours: string | null;
        externalMeetingHours: string | null;
        otherActivities: string | null;
        otherActivityHours: string | null;
        totalHours: string | null;
        notes: string | null;
        submittedAt: Date | null;
        approvedAt: Date | null;
        approvedBy: string | null;
    }>;
    getTeamByProject(projectId: string): Promise<{
        id: string;
        name: string;
        description: string | null;
    } | null>;
    update(id: string, updateDailyUpdateDto: UpdateDailyUpdateDto): Promise<{
        date: Date;
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        userId: string;
        status: string | null;
        projectId: string;
        teamId: string | null;
        tickets: string | null;
        internalMeetingHours: string | null;
        externalMeetingHours: string | null;
        otherActivities: string | null;
        otherActivityHours: string | null;
        totalHours: string | null;
        notes: string | null;
        submittedAt: Date | null;
        approvedAt: Date | null;
        approvedBy: string | null;
    }>;
    remove(id: string): Promise<void>;
    submit(id: string): Promise<{
        date: Date;
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        userId: string;
        status: string | null;
        projectId: string;
        teamId: string | null;
        tickets: string | null;
        internalMeetingHours: string | null;
        externalMeetingHours: string | null;
        otherActivities: string | null;
        otherActivityHours: string | null;
        totalHours: string | null;
        notes: string | null;
        submittedAt: Date | null;
        approvedAt: Date | null;
        approvedBy: string | null;
    }>;
    approve(id: string, approveDailyUpdateDto: ApproveDailyUpdateDto): Promise<{
        date: Date;
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        userId: string;
        status: string | null;
        projectId: string;
        teamId: string | null;
        tickets: string | null;
        internalMeetingHours: string | null;
        externalMeetingHours: string | null;
        otherActivities: string | null;
        otherActivityHours: string | null;
        totalHours: string | null;
        notes: string | null;
        submittedAt: Date | null;
        approvedAt: Date | null;
        approvedBy: string | null;
    }>;
}
